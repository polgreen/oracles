Fri 21 May 2021 15:45:17 BST
non terminal has 13rules
Start OGIS
SYNTH iteration 1
outputting synth fun with grammar 
rules for nt 13
RUle constant(_ bv0 64)
RUle constant(_ bv1 64)
RUle symbolx
RUle bitnot(bvnot Start)
RUle shl(bvshl Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv4 64))
RUle lshr(bvlshr Start (_ bv16 64))
RUle bitand(bvand Start Start)
RUle bitor(bvor Start Start)
RUle bitxor(bvxor Start Start)
RUle +(bvadd Start Start)
RUle if(ite (= Start (_ bv1 64)) Start Start)
Got solution f -> (_ bv0 64)
VERIFY iteration 1
; SMT 2
; Generated for CVC 4
(set-info :source "generated by fastsynth")
(set-option :produce-models true)
(set-logic ALL)

; find_symbols
(declare-fun |ref| ((_ BitVec 64) )(_ BitVec 64))
; set_to true (equal)
(define-fun |H0| () (_ BitVec 64) (ref (_ bv15100863014553326448 64) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 64) (ref (_ bv7605658837607395054 64) ))

; set_to true (equal)
(define-fun |H2| () (_ BitVec 64) (ref (_ bv4980999104926681573 64) ))

; set_to true (equal)
(define-fun |H3| () (_ BitVec 64) (ref (_ bv15599022343820771637 64) ))

; set_to true (equal)
(define-fun |H4| () (_ BitVec 64) (ref (_ bv13168169719692032940 64) ))

; set_to true (equal)
(define-fun |H5| () (_ BitVec 64) (ref (_ bv14149715990539213290 64) ))

; set_to true (equal)
(define-fun |H6| () (_ BitVec 64) (ref (_ bv16162651881179936104 64) ))

; set_to true (equal)
(define-fun |H7| () (_ BitVec 64) (ref (_ bv804357860950627548 64) ))

; set_to true (equal)
(define-fun |H8| () (_ BitVec 64) (ref (_ bv10945518138543433994 64) ))

; set_to true (equal)
(define-fun |H9| () (_ BitVec 64) (ref (_ bv11222014246985116616 64) ))

; set_to false
(assert (not (and (= (_ bv0 64) (ref (_ bv11222014246985116616 64) )) (= (_ bv0 64) (ref (_ bv10945518138543433994 64) )) (= (_ bv0 64) (ref (_ bv804357860950627548 64) )) (= (_ bv0 64) (ref (_ bv16162651881179936104 64) )) (= (_ bv0 64) (ref (_ bv14149715990539213290 64) )) (= (_ bv0 64) (ref (_ bv13168169719692032940 64) )) (= (_ bv0 64) (ref (_ bv15599022343820771637 64) )) (= (_ bv0 64) (ref (_ bv4980999104926681573 64) )) (= (_ bv0 64) (ref (_ bv7605658837607395054 64) )) (= (_ bv0 64) (ref (_ bv15100863014553326448 64) )))))

Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
; SMT 2
; Generated for CVC 4
(set-info :source "generated by fastsynth")
(set-option :produce-models true)
(set-logic ALL)

; find_symbols
(declare-fun |ref| ((_ BitVec 64) )(_ BitVec 64))
; set_to true (equal)
(define-fun |H0| () (_ BitVec 64) (ref (_ bv15100863014553326448 64) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 64) (ref (_ bv7605658837607395054 64) ))

; set_to true (equal)
(define-fun |H2| () (_ BitVec 64) (ref (_ bv4980999104926681573 64) ))

; set_to true (equal)
(define-fun |H3| () (_ BitVec 64) (ref (_ bv15599022343820771637 64) ))

; set_to true (equal)
(define-fun |H4| () (_ BitVec 64) (ref (_ bv13168169719692032940 64) ))

; set_to true (equal)
(define-fun |H5| () (_ BitVec 64) (ref (_ bv14149715990539213290 64) ))

; set_to true (equal)
(define-fun |H6| () (_ BitVec 64) (ref (_ bv16162651881179936104 64) ))

; set_to true (equal)
(define-fun |H7| () (_ BitVec 64) (ref (_ bv804357860950627548 64) ))

; set_to true (equal)
(define-fun |H8| () (_ BitVec 64) (ref (_ bv10945518138543433994 64) ))

; set_to true (equal)
(define-fun |H9| () (_ BitVec 64) (ref (_ bv11222014246985116616 64) ))

; set_to false
(assert (not (and (= (_ bv0 64) (ref (_ bv11222014246985116616 64) )) (= (_ bv0 64) (ref (_ bv10945518138543433994 64) )) (= (_ bv0 64) (ref (_ bv804357860950627548 64) )) (= (_ bv0 64) (ref (_ bv16162651881179936104 64) )) (= (_ bv0 64) (ref (_ bv14149715990539213290 64) )) (= (_ bv0 64) (ref (_ bv13168169719692032940 64) )) (= (_ bv0 64) (ref (_ bv15599022343820771637 64) )) (= (_ bv0 64) (ref (_ bv4980999104926681573 64) )) (= (_ bv0 64) (ref (_ bv7605658837607395054 64) )) (= (_ bv0 64) (ref (_ bv15100863014553326448 64) )))))

; set_to true
(assert (=> (= (_ bv11222014246985116616 64) (_ bv11222014246985116616 64)) (= |H9| (_ bv4294967294 64))))

; set_to true
(assert (=> (= (_ bv10945518138543433994 64) (_ bv10945518138543433994 64)) (= |H8| (_ bv4294967294 64))))

; set_to true
(assert (=> (= (_ bv804357860950627548 64) (_ bv804357860950627548 64)) (= |H7| (_ bv4294967294 64))))

; set_to true
(assert (=> (= (_ bv16162651881179936104 64) (_ bv16162651881179936104 64)) (= |H6| (_ bv4294967294 64))))

; set_to true
(assert (=> (= (_ bv14149715990539213290 64) (_ bv14149715990539213290 64)) (= |H5| (_ bv4294967294 64))))

; set_to true
(assert (=> (= (_ bv13168169719692032940 64) (_ bv13168169719692032940 64)) (= |H4| (_ bv4294967294 64))))

; set_to true
(assert (=> (= (_ bv4980999104926681573 64) (_ bv4980999104926681573 64)) (= |H2| (_ bv4294967294 64))))

; set_to true
(assert (=> (= (_ bv7605658837607395054 64) (_ bv7605658837607395054 64)) (= |H1| (_ bv4294967294 64))))

; set_to true
(assert (=> (= (_ bv15599022343820771637 64) (_ bv15599022343820771637 64)) (= |H3| (_ bv4294967294 64))))

; set_to true
(assert (=> (= (_ bv15100863014553326448 64) (_ bv15100863014553326448 64)) (= |H0| (_ bv4294967294 64))))

Fail: got 10 new constraints
SYNTH iteration 2
outputting synth fun with grammar 
rules for nt 13
RUle constant(_ bv0 64)
RUle constant(_ bv1 64)
RUle symbolx
RUle bitnot(bvnot Start)
RUle shl(bvshl Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv4 64))
RUle lshr(bvlshr Start (_ bv16 64))
RUle bitand(bvand Start Start)
RUle bitor(bvor Start Start)
RUle bitxor(bvxor Start Start)
RUle +(bvadd Start Start)
RUle if(ite (= Start (_ bv1 64)) Start Start)
Got solution f -> (bvxor (_ bv1 64) (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)))
VERIFY iteration 2
; SMT 2
; Generated for CVC 4
(set-info :source "generated by fastsynth")
(set-option :produce-models true)
(set-logic ALL)

; find_symbols
(declare-fun |ref| ((_ BitVec 64) )(_ BitVec 64))
; set_to true (equal)
(define-fun |H0| () (_ BitVec 64) (ref (_ bv15100863014553326448 64) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 64) (ref (_ bv7605658837607395054 64) ))

; set_to true (equal)
(define-fun |H2| () (_ BitVec 64) (ref (_ bv4980999104926681573 64) ))

; set_to true (equal)
(define-fun |H3| () (_ BitVec 64) (ref (_ bv15599022343820771637 64) ))

; set_to true (equal)
(define-fun |H4| () (_ BitVec 64) (ref (_ bv13168169719692032940 64) ))

; set_to true (equal)
(define-fun |H5| () (_ BitVec 64) (ref (_ bv14149715990539213290 64) ))

; set_to true (equal)
(define-fun |H6| () (_ BitVec 64) (ref (_ bv16162651881179936104 64) ))

; set_to true (equal)
(define-fun |H7| () (_ BitVec 64) (ref (_ bv804357860950627548 64) ))

; set_to true (equal)
(define-fun |H8| () (_ BitVec 64) (ref (_ bv10945518138543433994 64) ))

; set_to true (equal)
(define-fun |H9| () (_ BitVec 64) (ref (_ bv11222014246985116616 64) ))

; set_to false
(assert (not (=> (and (= (ref (_ bv4980999104926681573 64) ) (_ bv4294967294 64)) (= (ref (_ bv7605658837607395054 64) ) (_ bv4294967294 64)) (= (ref (_ bv10945518138543433994 64) ) (_ bv4294967294 64)) (= (ref (_ bv11222014246985116616 64) ) (_ bv4294967294 64)) (= (ref (_ bv804357860950627548 64) ) (_ bv4294967294 64)) (= (ref (_ bv13168169719692032940 64) ) (_ bv4294967294 64)) (= (ref (_ bv14149715990539213290 64) ) (_ bv4294967294 64)) (= (ref (_ bv15100863014553326448 64) ) (_ bv4294967294 64)) (= (ref (_ bv15599022343820771637 64) ) (_ bv4294967294 64)) (= (ref (_ bv16162651881179936104 64) ) (_ bv4294967294 64))) (and (= (bvxor (_ bv1 64) (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64))) (ref (_ bv11222014246985116616 64) )) (= (bvxor (_ bv1 64) (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64))) (ref (_ bv10945518138543433994 64) )) (= (bvxor (_ bv1 64) (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64))) (ref (_ bv804357860950627548 64) )) (= (bvxor (_ bv1 64) (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64))) (ref (_ bv16162651881179936104 64) )) (= (bvxor (_ bv1 64) (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64))) (ref (_ bv14149715990539213290 64) )) (= (bvxor (_ bv1 64) (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64))) (ref (_ bv13168169719692032940 64) )) (= (bvxor (_ bv1 64) (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64))) (ref (_ bv15599022343820771637 64) )) (= (bvxor (_ bv1 64) (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64))) (ref (_ bv4980999104926681573 64) )) (= (bvxor (_ bv1 64) (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64))) (ref (_ bv7605658837607395054 64) )) (= (bvxor (_ bv1 64) (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64))) (ref (_ bv15100863014553326448 64) ))))))

Verification passed
SOLUTION:
f  =  (bvxor (_ bv1 64) (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)))
        1.31 real         0.98 user         0.06 sys

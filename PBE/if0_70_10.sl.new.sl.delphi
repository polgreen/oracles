Fri 21 May 2021 16:16:25 BST
Start OGIS
SYNTH iteration 1
Got solution f -> 0
VERIFY iteration 1
; SMT 2
; Generated for CVC 4
(set-info :source "generated by fastsynth")
(set-option :produce-models true)
(set-logic ALL)

; find_symbols
(declare-fun |ref| ((_ BitVec 64) )(_ BitVec 64))
; set_to true (equal)
(define-fun |H0| () (_ BitVec 64) (ref (_ bv5677983686260986808 64) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 64) (ref (_ bv16691687135222664290 64) ))

; set_to true (equal)
(define-fun |H2| () (_ BitVec 64) (ref (_ bv8387511441882307136 64) ))

; set_to true (equal)
(define-fun |H3| () (_ BitVec 64) (ref (_ bv14107381310272912912 64) ))

; set_to true (equal)
(define-fun |H4| () (_ BitVec 64) (ref (_ bv958146843133204174 64) ))

; set_to true (equal)
(define-fun |H5| () (_ BitVec 64) (ref (_ bv4500428438446223063 64) ))

; set_to true (equal)
(define-fun |H6| () (_ BitVec 64) (ref (_ bv6361559194427252974 64) ))

; set_to true (equal)
(define-fun |H7| () (_ BitVec 64) (ref (_ bv6744736275626843518 64) ))

; set_to true (equal)
(define-fun |H8| () (_ BitVec 64) (ref (_ bv1579368732033041697 64) ))

; set_to true (equal)
(define-fun |H9| () (_ BitVec 64) (ref (_ bv1929820083185945363 64) ))

; set_to false
(assert (not (and (= (_ bv0 64) (ref (_ bv1929820083185945363 64) )) (= (_ bv0 64) (ref (_ bv1579368732033041697 64) )) (= (_ bv0 64) (ref (_ bv6744736275626843518 64) )) (= (_ bv0 64) (ref (_ bv6361559194427252974 64) )) (= (_ bv0 64) (ref (_ bv4500428438446223063 64) )) (= (_ bv0 64) (ref (_ bv958146843133204174 64) )) (= (_ bv0 64) (ref (_ bv14107381310272912912 64) )) (= (_ bv0 64) (ref (_ bv8387511441882307136 64) )) (= (_ bv0 64) (ref (_ bv16691687135222664290 64) )) (= (_ bv0 64) (ref (_ bv5677983686260986808 64) )))))

Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
; SMT 2
; Generated for CVC 4
(set-info :source "generated by fastsynth")
(set-option :produce-models true)
(set-logic ALL)

; find_symbols
(declare-fun |ref| ((_ BitVec 64) )(_ BitVec 64))
; set_to true (equal)
(define-fun |H0| () (_ BitVec 64) (ref (_ bv5677983686260986808 64) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 64) (ref (_ bv16691687135222664290 64) ))

; set_to true (equal)
(define-fun |H2| () (_ BitVec 64) (ref (_ bv8387511441882307136 64) ))

; set_to true (equal)
(define-fun |H3| () (_ BitVec 64) (ref (_ bv14107381310272912912 64) ))

; set_to true (equal)
(define-fun |H4| () (_ BitVec 64) (ref (_ bv958146843133204174 64) ))

; set_to true (equal)
(define-fun |H5| () (_ BitVec 64) (ref (_ bv4500428438446223063 64) ))

; set_to true (equal)
(define-fun |H6| () (_ BitVec 64) (ref (_ bv6361559194427252974 64) ))

; set_to true (equal)
(define-fun |H7| () (_ BitVec 64) (ref (_ bv6744736275626843518 64) ))

; set_to true (equal)
(define-fun |H8| () (_ BitVec 64) (ref (_ bv1579368732033041697 64) ))

; set_to true (equal)
(define-fun |H9| () (_ BitVec 64) (ref (_ bv1929820083185945363 64) ))

; set_to false
(assert (not (and (= (_ bv0 64) (ref (_ bv1929820083185945363 64) )) (= (_ bv0 64) (ref (_ bv1579368732033041697 64) )) (= (_ bv0 64) (ref (_ bv6744736275626843518 64) )) (= (_ bv0 64) (ref (_ bv6361559194427252974 64) )) (= (_ bv0 64) (ref (_ bv4500428438446223063 64) )) (= (_ bv0 64) (ref (_ bv958146843133204174 64) )) (= (_ bv0 64) (ref (_ bv14107381310272912912 64) )) (= (_ bv0 64) (ref (_ bv8387511441882307136 64) )) (= (_ bv0 64) (ref (_ bv16691687135222664290 64) )) (= (_ bv0 64) (ref (_ bv5677983686260986808 64) )))))

; set_to true
(assert (=> (= (_ bv1929820083185945363 64) (_ bv1929820083185945363 64)) (= |H9| (_ bv8589934590 64))))

; set_to true
(assert (=> (= (_ bv6361559194427252974 64) (_ bv6361559194427252974 64)) (= |H6| (_ bv8589934590 64))))

; set_to true
(assert (=> (= (_ bv1579368732033041697 64) (_ bv1579368732033041697 64)) (= |H8| (_ bv8589934590 64))))

; set_to true
(assert (=> (= (_ bv4500428438446223063 64) (_ bv4500428438446223063 64)) (= |H5| (_ bv8589934590 64))))

; set_to true
(assert (=> (= (_ bv8387511441882307136 64) (_ bv8387511441882307136 64)) (= |H2| (_ bv8589934590 64))))

; set_to true
(assert (=> (= (_ bv6744736275626843518 64) (_ bv6744736275626843518 64)) (= |H7| (_ bv8589934590 64))))

; set_to true
(assert (=> (= (_ bv958146843133204174 64) (_ bv958146843133204174 64)) (= |H4| (_ bv8589934590 64))))

; set_to true
(assert (=> (= (_ bv16691687135222664290 64) (_ bv16691687135222664290 64)) (= |H1| (_ bv8589934590 64))))

; set_to true
(assert (=> (= (_ bv14107381310272912912 64) (_ bv14107381310272912912 64)) (= |H3| (_ bv8589934590 64))))

; set_to true
(assert (=> (= (_ bv5677983686260986808 64) (_ bv5677983686260986808 64)) (= |H0| (_ bv8589934590 64))))

Fail: got 10 new constraints
SYNTH iteration 2
Got solution f -> ((~0 >> 16) >> 16) << 1
VERIFY iteration 2
; SMT 2
; Generated for CVC 4
(set-info :source "generated by fastsynth")
(set-option :produce-models true)
(set-logic ALL)

; find_symbols
(declare-fun |ref| ((_ BitVec 64) )(_ BitVec 64))
; set_to true (equal)
(define-fun |H0| () (_ BitVec 64) (ref (_ bv5677983686260986808 64) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 64) (ref (_ bv16691687135222664290 64) ))

; set_to true (equal)
(define-fun |H2| () (_ BitVec 64) (ref (_ bv8387511441882307136 64) ))

; set_to true (equal)
(define-fun |H3| () (_ BitVec 64) (ref (_ bv14107381310272912912 64) ))

; set_to true (equal)
(define-fun |H4| () (_ BitVec 64) (ref (_ bv958146843133204174 64) ))

; set_to true (equal)
(define-fun |H5| () (_ BitVec 64) (ref (_ bv4500428438446223063 64) ))

; set_to true (equal)
(define-fun |H6| () (_ BitVec 64) (ref (_ bv6361559194427252974 64) ))

; set_to true (equal)
(define-fun |H7| () (_ BitVec 64) (ref (_ bv6744736275626843518 64) ))

; set_to true (equal)
(define-fun |H8| () (_ BitVec 64) (ref (_ bv1579368732033041697 64) ))

; set_to true (equal)
(define-fun |H9| () (_ BitVec 64) (ref (_ bv1929820083185945363 64) ))

; set_to false
(assert (not (=> (and (= (ref (_ bv1579368732033041697 64) ) (_ bv8589934590 64)) (= (ref (_ bv1929820083185945363 64) ) (_ bv8589934590 64)) (= (ref (_ bv4500428438446223063 64) ) (_ bv8589934590 64)) (= (ref (_ bv5677983686260986808 64) ) (_ bv8589934590 64)) (= (ref (_ bv6361559194427252974 64) ) (_ bv8589934590 64)) (= (ref (_ bv6744736275626843518 64) ) (_ bv8589934590 64)) (= (ref (_ bv8387511441882307136 64) ) (_ bv8589934590 64)) (= (ref (_ bv14107381310272912912 64) ) (_ bv8589934590 64)) (= (ref (_ bv958146843133204174 64) ) (_ bv8589934590 64)) (= (ref (_ bv16691687135222664290 64) ) (_ bv8589934590 64))) (and (= (bvshl (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (_ bv1 64)) (ref (_ bv1929820083185945363 64) )) (= (bvshl (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (_ bv1 64)) (ref (_ bv1579368732033041697 64) )) (= (bvshl (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (_ bv1 64)) (ref (_ bv6744736275626843518 64) )) (= (bvshl (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (_ bv1 64)) (ref (_ bv6361559194427252974 64) )) (= (bvshl (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (_ bv1 64)) (ref (_ bv4500428438446223063 64) )) (= (bvshl (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (_ bv1 64)) (ref (_ bv958146843133204174 64) )) (= (bvshl (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (_ bv1 64)) (ref (_ bv14107381310272912912 64) )) (= (bvshl (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (_ bv1 64)) (ref (_ bv8387511441882307136 64) )) (= (bvshl (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (_ bv1 64)) (ref (_ bv16691687135222664290 64) )) (= (bvshl (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (_ bv1 64)) (ref (_ bv5677983686260986808 64) ))))))

Verification passed
SOLUTION:
f  =  (bvshl (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (_ bv1 64))
        0.53 real         0.43 user         0.05 sys

Fri 21 May 2021 15:45:10 BST
non terminal has 13rules
Start OGIS
SYNTH iteration 1
outputting synth fun with grammar 
rules for nt 13
RUle constant(_ bv0 64)
RUle constant(_ bv1 64)
RUle symbolx
RUle bitnot(bvnot Start)
RUle shl(bvshl Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv4 64))
RUle lshr(bvlshr Start (_ bv16 64))
RUle bitand(bvand Start Start)
RUle bitor(bvor Start Start)
RUle bitxor(bvxor Start Start)
RUle +(bvadd Start Start)
RUle if(ite (= Start (_ bv1 64)) Start Start)
Got solution f -> (_ bv0 64)
VERIFY iteration 1
; SMT 2
; Generated for CVC 4
(set-info :source "generated by fastsynth")
(set-option :produce-models true)
(set-logic ALL)

; find_symbols
(declare-fun |ref| ((_ BitVec 64) )(_ BitVec 64))
; set_to true (equal)
(define-fun |H0| () (_ BitVec 64) (ref (_ bv4818973124005088910 64) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 64) (ref (_ bv1063194339697306887 64) ))

; set_to true (equal)
(define-fun |H2| () (_ BitVec 64) (ref (_ bv14324937100294375076 64) ))

; set_to true (equal)
(define-fun |H3| () (_ BitVec 64) (ref (_ bv2838091724284007777 64) ))

; set_to true (equal)
(define-fun |H4| () (_ BitVec 64) (ref (_ bv15136219312016853464 64) ))

; set_to true (equal)
(define-fun |H5| () (_ BitVec 64) (ref (_ bv16351194561774765942 64) ))

; set_to true (equal)
(define-fun |H6| () (_ BitVec 64) (ref (_ bv9730684418608949398 64) ))

; set_to true (equal)
(define-fun |H7| () (_ BitVec 64) (ref (_ bv5608129664592365896 64) ))

; set_to true (equal)
(define-fun |H8| () (_ BitVec 64) (ref (_ bv2851656626699923 64) ))

; set_to true (equal)
(define-fun |H9| () (_ BitVec 64) (ref (_ bv13101844221624628254 64) ))

; set_to false
(assert (not (and (= (_ bv0 64) (ref (_ bv13101844221624628254 64) )) (= (_ bv0 64) (ref (_ bv2851656626699923 64) )) (= (_ bv0 64) (ref (_ bv5608129664592365896 64) )) (= (_ bv0 64) (ref (_ bv9730684418608949398 64) )) (= (_ bv0 64) (ref (_ bv16351194561774765942 64) )) (= (_ bv0 64) (ref (_ bv15136219312016853464 64) )) (= (_ bv0 64) (ref (_ bv2838091724284007777 64) )) (= (_ bv0 64) (ref (_ bv14324937100294375076 64) )) (= (_ bv0 64) (ref (_ bv1063194339697306887 64) )) (= (_ bv0 64) (ref (_ bv4818973124005088910 64) )))))

Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
; SMT 2
; Generated for CVC 4
(set-info :source "generated by fastsynth")
(set-option :produce-models true)
(set-logic ALL)

; find_symbols
(declare-fun |ref| ((_ BitVec 64) )(_ BitVec 64))
; set_to true (equal)
(define-fun |H0| () (_ BitVec 64) (ref (_ bv4818973124005088910 64) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 64) (ref (_ bv1063194339697306887 64) ))

; set_to true (equal)
(define-fun |H2| () (_ BitVec 64) (ref (_ bv14324937100294375076 64) ))

; set_to true (equal)
(define-fun |H3| () (_ BitVec 64) (ref (_ bv2838091724284007777 64) ))

; set_to true (equal)
(define-fun |H4| () (_ BitVec 64) (ref (_ bv15136219312016853464 64) ))

; set_to true (equal)
(define-fun |H5| () (_ BitVec 64) (ref (_ bv16351194561774765942 64) ))

; set_to true (equal)
(define-fun |H6| () (_ BitVec 64) (ref (_ bv9730684418608949398 64) ))

; set_to true (equal)
(define-fun |H7| () (_ BitVec 64) (ref (_ bv5608129664592365896 64) ))

; set_to true (equal)
(define-fun |H8| () (_ BitVec 64) (ref (_ bv2851656626699923 64) ))

; set_to true (equal)
(define-fun |H9| () (_ BitVec 64) (ref (_ bv13101844221624628254 64) ))

; set_to false
(assert (not (and (= (_ bv0 64) (ref (_ bv13101844221624628254 64) )) (= (_ bv0 64) (ref (_ bv2851656626699923 64) )) (= (_ bv0 64) (ref (_ bv5608129664592365896 64) )) (= (_ bv0 64) (ref (_ bv9730684418608949398 64) )) (= (_ bv0 64) (ref (_ bv16351194561774765942 64) )) (= (_ bv0 64) (ref (_ bv15136219312016853464 64) )) (= (_ bv0 64) (ref (_ bv2838091724284007777 64) )) (= (_ bv0 64) (ref (_ bv14324937100294375076 64) )) (= (_ bv0 64) (ref (_ bv1063194339697306887 64) )) (= (_ bv0 64) (ref (_ bv4818973124005088910 64) )))))

; set_to true
(assert (=> (= (_ bv13101844221624628254 64) (_ bv13101844221624628254 64)) (= |H9| (_ bv4294967295 64))))

; set_to true
(assert (=> (= (_ bv2851656626699923 64) (_ bv2851656626699923 64)) (= |H8| (_ bv4294967295 64))))

; set_to true
(assert (=> (= (_ bv5608129664592365896 64) (_ bv5608129664592365896 64)) (= |H7| (_ bv4294967295 64))))

; set_to true
(assert (=> (= (_ bv9730684418608949398 64) (_ bv9730684418608949398 64)) (= |H6| (_ bv4294967295 64))))

; set_to true
(assert (=> (= (_ bv16351194561774765942 64) (_ bv16351194561774765942 64)) (= |H5| (_ bv4294967295 64))))

; set_to true
(assert (=> (= (_ bv15136219312016853464 64) (_ bv15136219312016853464 64)) (= |H4| (_ bv4294967295 64))))

; set_to true
(assert (=> (= (_ bv14324937100294375076 64) (_ bv14324937100294375076 64)) (= |H2| (_ bv4294967295 64))))

; set_to true
(assert (=> (= (_ bv1063194339697306887 64) (_ bv1063194339697306887 64)) (= |H1| (_ bv4294967295 64))))

; set_to true
(assert (=> (= (_ bv2838091724284007777 64) (_ bv2838091724284007777 64)) (= |H3| (_ bv4294967295 64))))

; set_to true
(assert (=> (= (_ bv4818973124005088910 64) (_ bv4818973124005088910 64)) (= |H0| (_ bv4294967295 64))))

Fail: got 10 new constraints
SYNTH iteration 2
outputting synth fun with grammar 
rules for nt 13
RUle constant(_ bv0 64)
RUle constant(_ bv1 64)
RUle symbolx
RUle bitnot(bvnot Start)
RUle shl(bvshl Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv4 64))
RUle lshr(bvlshr Start (_ bv16 64))
RUle bitand(bvand Start Start)
RUle bitor(bvor Start Start)
RUle bitxor(bvxor Start Start)
RUle +(bvadd Start Start)
RUle if(ite (= Start (_ bv1 64)) Start Start)
Got solution f -> (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64))
VERIFY iteration 2
; SMT 2
; Generated for CVC 4
(set-info :source "generated by fastsynth")
(set-option :produce-models true)
(set-logic ALL)

; find_symbols
(declare-fun |ref| ((_ BitVec 64) )(_ BitVec 64))
; set_to true (equal)
(define-fun |H0| () (_ BitVec 64) (ref (_ bv4818973124005088910 64) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 64) (ref (_ bv1063194339697306887 64) ))

; set_to true (equal)
(define-fun |H2| () (_ BitVec 64) (ref (_ bv14324937100294375076 64) ))

; set_to true (equal)
(define-fun |H3| () (_ BitVec 64) (ref (_ bv2838091724284007777 64) ))

; set_to true (equal)
(define-fun |H4| () (_ BitVec 64) (ref (_ bv15136219312016853464 64) ))

; set_to true (equal)
(define-fun |H5| () (_ BitVec 64) (ref (_ bv16351194561774765942 64) ))

; set_to true (equal)
(define-fun |H6| () (_ BitVec 64) (ref (_ bv9730684418608949398 64) ))

; set_to true (equal)
(define-fun |H7| () (_ BitVec 64) (ref (_ bv5608129664592365896 64) ))

; set_to true (equal)
(define-fun |H8| () (_ BitVec 64) (ref (_ bv2851656626699923 64) ))

; set_to true (equal)
(define-fun |H9| () (_ BitVec 64) (ref (_ bv13101844221624628254 64) ))

; set_to false
(assert (not (=> (and (= (ref (_ bv2838091724284007777 64) ) (_ bv4294967295 64)) (= (ref (_ bv4818973124005088910 64) ) (_ bv4294967295 64)) (= (ref (_ bv5608129664592365896 64) ) (_ bv4294967295 64)) (= (ref (_ bv9730684418608949398 64) ) (_ bv4294967295 64)) (= (ref (_ bv2851656626699923 64) ) (_ bv4294967295 64)) (= (ref (_ bv13101844221624628254 64) ) (_ bv4294967295 64)) (= (ref (_ bv14324937100294375076 64) ) (_ bv4294967295 64)) (= (ref (_ bv15136219312016853464 64) ) (_ bv4294967295 64)) (= (ref (_ bv16351194561774765942 64) ) (_ bv4294967295 64)) (= (ref (_ bv1063194339697306887 64) ) (_ bv4294967295 64))) (and (= (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (ref (_ bv13101844221624628254 64) )) (= (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (ref (_ bv2851656626699923 64) )) (= (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (ref (_ bv5608129664592365896 64) )) (= (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (ref (_ bv9730684418608949398 64) )) (= (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (ref (_ bv16351194561774765942 64) )) (= (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (ref (_ bv15136219312016853464 64) )) (= (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (ref (_ bv2838091724284007777 64) )) (= (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (ref (_ bv14324937100294375076 64) )) (= (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (ref (_ bv1063194339697306887 64) )) (= (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (ref (_ bv4818973124005088910 64) ))))))

Verification passed
SOLUTION:
f  =  (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64))
        0.42 real         0.12 user         0.06 sys

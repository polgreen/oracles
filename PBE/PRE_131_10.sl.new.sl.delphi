Fri 21 May 2021 15:47:31 BST
non terminal has 13rules
Start OGIS
SYNTH iteration 1
outputting synth fun with grammar 
rules for nt 13
RUle constant(_ bv0 64)
RUle constant(_ bv1 64)
RUle symbolx
RUle bitnot(bvnot Start)
RUle shl(bvshl Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv4 64))
RUle lshr(bvlshr Start (_ bv16 64))
RUle bitand(bvand Start Start)
RUle bitor(bvor Start Start)
RUle bitxor(bvxor Start Start)
RUle +(bvadd Start Start)
RUle if(ite (= Start (_ bv1 64)) Start Start)
Got solution f -> (_ bv0 64)
VERIFY iteration 1
; SMT 2
; Generated for CVC 4
(set-info :source "generated by fastsynth")
(set-option :produce-models true)
(set-logic ALL)

; find_symbols
(declare-fun |ref| ((_ BitVec 64) )(_ BitVec 64))
; set_to true (equal)
(define-fun |H0| () (_ BitVec 64) (ref (_ bv443268370149182954 64) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 64) (ref (_ bv10006591753536484761 64) ))

; set_to true (equal)
(define-fun |H2| () (_ BitVec 64) (ref (_ bv10269840653949583934 64) ))

; set_to true (equal)
(define-fun |H3| () (_ BitVec 64) (ref (_ bv2672998137875105729 64) ))

; set_to true (equal)
(define-fun |H4| () (_ BitVec 64) (ref (_ bv10426030539842894054 64) ))

; set_to true (equal)
(define-fun |H5| () (_ BitVec 64) (ref (_ bv2402083156808668460 64) ))

; set_to true (equal)
(define-fun |H6| () (_ BitVec 64) (ref (_ bv598300186185850450 64) ))

; set_to true (equal)
(define-fun |H7| () (_ BitVec 64) (ref (_ bv6712372857808546540 64) ))

; set_to true (equal)
(define-fun |H8| () (_ BitVec 64) (ref (_ bv9423802986977864615 64) ))

; set_to true (equal)
(define-fun |H9| () (_ BitVec 64) (ref (_ bv1897253385285246234 64) ))

; set_to false
(assert (not (and (= (_ bv0 64) (ref (_ bv1897253385285246234 64) )) (= (_ bv0 64) (ref (_ bv9423802986977864615 64) )) (= (_ bv0 64) (ref (_ bv6712372857808546540 64) )) (= (_ bv0 64) (ref (_ bv598300186185850450 64) )) (= (_ bv0 64) (ref (_ bv2402083156808668460 64) )) (= (_ bv0 64) (ref (_ bv10426030539842894054 64) )) (= (_ bv0 64) (ref (_ bv2672998137875105729 64) )) (= (_ bv0 64) (ref (_ bv10269840653949583934 64) )) (= (_ bv0 64) (ref (_ bv10006591753536484761 64) )) (= (_ bv0 64) (ref (_ bv443268370149182954 64) )))))

Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
; SMT 2
; Generated for CVC 4
(set-info :source "generated by fastsynth")
(set-option :produce-models true)
(set-logic ALL)

; find_symbols
(declare-fun |ref| ((_ BitVec 64) )(_ BitVec 64))
; set_to true (equal)
(define-fun |H0| () (_ BitVec 64) (ref (_ bv443268370149182954 64) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 64) (ref (_ bv10006591753536484761 64) ))

; set_to true (equal)
(define-fun |H2| () (_ BitVec 64) (ref (_ bv10269840653949583934 64) ))

; set_to true (equal)
(define-fun |H3| () (_ BitVec 64) (ref (_ bv2672998137875105729 64) ))

; set_to true (equal)
(define-fun |H4| () (_ BitVec 64) (ref (_ bv10426030539842894054 64) ))

; set_to true (equal)
(define-fun |H5| () (_ BitVec 64) (ref (_ bv2402083156808668460 64) ))

; set_to true (equal)
(define-fun |H6| () (_ BitVec 64) (ref (_ bv598300186185850450 64) ))

; set_to true (equal)
(define-fun |H7| () (_ BitVec 64) (ref (_ bv6712372857808546540 64) ))

; set_to true (equal)
(define-fun |H8| () (_ BitVec 64) (ref (_ bv9423802986977864615 64) ))

; set_to true (equal)
(define-fun |H9| () (_ BitVec 64) (ref (_ bv1897253385285246234 64) ))

; set_to false
(assert (not (and (= (_ bv0 64) (ref (_ bv1897253385285246234 64) )) (= (_ bv0 64) (ref (_ bv9423802986977864615 64) )) (= (_ bv0 64) (ref (_ bv6712372857808546540 64) )) (= (_ bv0 64) (ref (_ bv598300186185850450 64) )) (= (_ bv0 64) (ref (_ bv2402083156808668460 64) )) (= (_ bv0 64) (ref (_ bv10426030539842894054 64) )) (= (_ bv0 64) (ref (_ bv2672998137875105729 64) )) (= (_ bv0 64) (ref (_ bv10269840653949583934 64) )) (= (_ bv0 64) (ref (_ bv10006591753536484761 64) )) (= (_ bv0 64) (ref (_ bv443268370149182954 64) )))))

; set_to true
(assert (=> (= (_ bv1897253385285246234 64) (_ bv1897253385285246234 64)) (= |H9| (_ bv576460752169205760 64))))

; set_to true
(assert (=> (= (_ bv9423802986977864615 64) (_ bv9423802986977864615 64)) (= |H8| (_ bv576460752169205760 64))))

; set_to true
(assert (=> (= (_ bv6712372857808546540 64) (_ bv6712372857808546540 64)) (= |H7| (_ bv576460752169205760 64))))

; set_to true
(assert (=> (= (_ bv598300186185850450 64) (_ bv598300186185850450 64)) (= |H6| (_ bv576460752169205760 64))))

; set_to true
(assert (=> (= (_ bv2402083156808668460 64) (_ bv2402083156808668460 64)) (= |H5| (_ bv576460752169205760 64))))

; set_to true
(assert (=> (= (_ bv10426030539842894054 64) (_ bv10426030539842894054 64)) (= |H4| (_ bv576460752169205760 64))))

; set_to true
(assert (=> (= (_ bv10269840653949583934 64) (_ bv10269840653949583934 64)) (= |H2| (_ bv576460752169205760 64))))

; set_to true
(assert (=> (= (_ bv10006591753536484761 64) (_ bv10006591753536484761 64)) (= |H1| (_ bv576460752169205760 64))))

; set_to true
(assert (=> (= (_ bv2672998137875105729 64) (_ bv2672998137875105729 64)) (= |H3| (_ bv576460752169205760 64))))

; set_to true
(assert (=> (= (_ bv443268370149182954 64) (_ bv443268370149182954 64)) (= |H0| (_ bv576460752169205760 64))))

Fail: got 10 new constraints
SYNTH iteration 2
outputting synth fun with grammar 
rules for nt 13
RUle constant(_ bv0 64)
RUle constant(_ bv1 64)
RUle symbolx
RUle bitnot(bvnot Start)
RUle shl(bvshl Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv4 64))
RUle lshr(bvlshr Start (_ bv16 64))
RUle bitand(bvand Start Start)
RUle bitor(bvor Start Start)
RUle bitxor(bvxor Start Start)
RUle +(bvadd Start Start)
RUle if(ite (= Start (_ bv1 64)) Start Start)

Fri 21 May 2021 15:41:50 BST
non terminal has 13rules
Start OGIS
SYNTH iteration 1
outputting synth fun with grammar 
rules for nt 13
RUle constant(_ bv0 64)
RUle constant(_ bv1 64)
RUle symbolx
RUle bitnot(bvnot Start)
RUle shl(bvshl Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv4 64))
RUle lshr(bvlshr Start (_ bv16 64))
RUle bitand(bvand Start Start)
RUle bitor(bvor Start Start)
RUle bitxor(bvxor Start Start)
RUle +(bvadd Start Start)
RUle if(ite (= Start (_ bv1 64)) Start Start)
Got solution f -> (_ bv0 64)
VERIFY iteration 1
; SMT 2
; Generated for CVC 4
(set-info :source "generated by fastsynth")
(set-option :produce-models true)
(set-logic ALL)

; find_symbols
(declare-fun |ref| ((_ BitVec 64) )(_ BitVec 64))
; set_to true (equal)
(define-fun |H0| () (_ BitVec 64) (ref (_ bv1332195603847715788 64) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 64) (ref (_ bv16207980466464609321 64) ))

; set_to true (equal)
(define-fun |H2| () (_ BitVec 64) (ref (_ bv13218981372102204478 64) ))

; set_to true (equal)
(define-fun |H3| () (_ BitVec 64) (ref (_ bv15404971172358687004 64) ))

; set_to true (equal)
(define-fun |H4| () (_ BitVec 64) (ref (_ bv4695695943284612290 64) ))

; set_to true (equal)
(define-fun |H5| () (_ BitVec 64) (ref (_ bv6038523591226785354 64) ))

; set_to true (equal)
(define-fun |H6| () (_ BitVec 64) (ref (_ bv9841862643964609975 64) ))

; set_to true (equal)
(define-fun |H7| () (_ BitVec 64) (ref (_ bv12442701907946780654 64) ))

; set_to true (equal)
(define-fun |H8| () (_ BitVec 64) (ref (_ bv6353231294734242788 64) ))

; set_to true (equal)
(define-fun |H9| () (_ BitVec 64) (ref (_ bv14395628894721848556 64) ))

; set_to false
(assert (not (and (= (_ bv0 64) (ref (_ bv14395628894721848556 64) )) (= (_ bv0 64) (ref (_ bv6353231294734242788 64) )) (= (_ bv0 64) (ref (_ bv12442701907946780654 64) )) (= (_ bv0 64) (ref (_ bv9841862643964609975 64) )) (= (_ bv0 64) (ref (_ bv6038523591226785354 64) )) (= (_ bv0 64) (ref (_ bv4695695943284612290 64) )) (= (_ bv0 64) (ref (_ bv15404971172358687004 64) )) (= (_ bv0 64) (ref (_ bv13218981372102204478 64) )) (= (_ bv0 64) (ref (_ bv16207980466464609321 64) )) (= (_ bv0 64) (ref (_ bv1332195603847715788 64) )))))

Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
; SMT 2
; Generated for CVC 4
(set-info :source "generated by fastsynth")
(set-option :produce-models true)
(set-logic ALL)

; find_symbols
(declare-fun |ref| ((_ BitVec 64) )(_ BitVec 64))
; set_to true (equal)
(define-fun |H0| () (_ BitVec 64) (ref (_ bv1332195603847715788 64) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 64) (ref (_ bv16207980466464609321 64) ))

; set_to true (equal)
(define-fun |H2| () (_ BitVec 64) (ref (_ bv13218981372102204478 64) ))

; set_to true (equal)
(define-fun |H3| () (_ BitVec 64) (ref (_ bv15404971172358687004 64) ))

; set_to true (equal)
(define-fun |H4| () (_ BitVec 64) (ref (_ bv4695695943284612290 64) ))

; set_to true (equal)
(define-fun |H5| () (_ BitVec 64) (ref (_ bv6038523591226785354 64) ))

; set_to true (equal)
(define-fun |H6| () (_ BitVec 64) (ref (_ bv9841862643964609975 64) ))

; set_to true (equal)
(define-fun |H7| () (_ BitVec 64) (ref (_ bv12442701907946780654 64) ))

; set_to true (equal)
(define-fun |H8| () (_ BitVec 64) (ref (_ bv6353231294734242788 64) ))

; set_to true (equal)
(define-fun |H9| () (_ BitVec 64) (ref (_ bv14395628894721848556 64) ))

; set_to false
(assert (not (and (= (_ bv0 64) (ref (_ bv14395628894721848556 64) )) (= (_ bv0 64) (ref (_ bv6353231294734242788 64) )) (= (_ bv0 64) (ref (_ bv12442701907946780654 64) )) (= (_ bv0 64) (ref (_ bv9841862643964609975 64) )) (= (_ bv0 64) (ref (_ bv6038523591226785354 64) )) (= (_ bv0 64) (ref (_ bv4695695943284612290 64) )) (= (_ bv0 64) (ref (_ bv15404971172358687004 64) )) (= (_ bv0 64) (ref (_ bv13218981372102204478 64) )) (= (_ bv0 64) (ref (_ bv16207980466464609321 64) )) (= (_ bv0 64) (ref (_ bv1332195603847715788 64) )))))

; set_to true
(assert (=> (= (_ bv14395628894721848556 64) (_ bv14395628894721848556 64)) (= |H9| (_ bv18446744065119617026 64))))

; set_to true
(assert (=> (= (_ bv6353231294734242788 64) (_ bv6353231294734242788 64)) (= |H8| (_ bv18446744065119617026 64))))

; set_to true
(assert (=> (= (_ bv12442701907946780654 64) (_ bv12442701907946780654 64)) (= |H7| (_ bv18446744065119617026 64))))

; set_to true
(assert (=> (= (_ bv9841862643964609975 64) (_ bv9841862643964609975 64)) (= |H6| (_ bv18446744065119617026 64))))

; set_to true
(assert (=> (= (_ bv6038523591226785354 64) (_ bv6038523591226785354 64)) (= |H5| (_ bv18446744065119617026 64))))

; set_to true
(assert (=> (= (_ bv4695695943284612290 64) (_ bv4695695943284612290 64)) (= |H4| (_ bv18446744065119617026 64))))

; set_to true
(assert (=> (= (_ bv13218981372102204478 64) (_ bv13218981372102204478 64)) (= |H2| (_ bv18446744065119617026 64))))

; set_to true
(assert (=> (= (_ bv16207980466464609321 64) (_ bv16207980466464609321 64)) (= |H1| (_ bv18446744065119617026 64))))

; set_to true
(assert (=> (= (_ bv15404971172358687004 64) (_ bv15404971172358687004 64)) (= |H3| (_ bv18446744065119617026 64))))

; set_to true
(assert (=> (= (_ bv1332195603847715788 64) (_ bv1332195603847715788 64)) (= |H0| (_ bv18446744065119617026 64))))

Fail: got 10 new constraints
SYNTH iteration 2
outputting synth fun with grammar 
rules for nt 13
RUle constant(_ bv0 64)
RUle constant(_ bv1 64)
RUle symbolx
RUle bitnot(bvnot Start)
RUle shl(bvshl Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv4 64))
RUle lshr(bvlshr Start (_ bv16 64))
RUle bitand(bvand Start Start)
RUle bitor(bvor Start Start)
RUle bitxor(bvxor Start Start)
RUle +(bvadd Start Start)
RUle if(ite (= Start (_ bv1 64)) Start Start)

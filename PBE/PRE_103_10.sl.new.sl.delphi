Fri 21 May 2021 15:41:47 BST
non terminal has 13rules
Start OGIS
SYNTH iteration 1
outputting synth fun with grammar 
rules for nt 13
RUle constant(_ bv0 64)
RUle constant(_ bv1 64)
RUle symbolx
RUle bitnot(bvnot Start)
RUle shl(bvshl Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv4 64))
RUle lshr(bvlshr Start (_ bv16 64))
RUle bitand(bvand Start Start)
RUle bitor(bvor Start Start)
RUle bitxor(bvxor Start Start)
RUle +(bvadd Start Start)
RUle if(ite (= Start (_ bv1 64)) Start Start)
Got solution f -> (_ bv0 64)
VERIFY iteration 1
; SMT 2
; Generated for CVC 4
(set-info :source "generated by fastsynth")
(set-option :produce-models true)
(set-logic ALL)

; find_symbols
(declare-fun |ref| ((_ BitVec 64) )(_ BitVec 64))
; set_to true (equal)
(define-fun |H0| () (_ BitVec 64) (ref (_ bv811662424529134976 64) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 64) (ref (_ bv161828597377053829 64) ))

; set_to true (equal)
(define-fun |H2| () (_ BitVec 64) (ref (_ bv16144924893011299957 64) ))

; set_to true (equal)
(define-fun |H3| () (_ BitVec 64) (ref (_ bv8839253909313249595 64) ))

; set_to true (equal)
(define-fun |H4| () (_ BitVec 64) (ref (_ bv10893481731251300669 64) ))

; set_to true (equal)
(define-fun |H5| () (_ BitVec 64) (ref (_ bv13395322353855848678 64) ))

; set_to true (equal)
(define-fun |H6| () (_ BitVec 64) (ref (_ bv792637217060526429 64) ))

; set_to true (equal)
(define-fun |H7| () (_ BitVec 64) (ref (_ bv8397949731460236686 64) ))

; set_to true (equal)
(define-fun |H8| () (_ BitVec 64) (ref (_ bv16222105318718573220 64) ))

; set_to true (equal)
(define-fun |H9| () (_ BitVec 64) (ref (_ bv9638033490447332030 64) ))

; set_to false
(assert (not (and (= (_ bv0 64) (ref (_ bv9638033490447332030 64) )) (= (_ bv0 64) (ref (_ bv16222105318718573220 64) )) (= (_ bv0 64) (ref (_ bv8397949731460236686 64) )) (= (_ bv0 64) (ref (_ bv792637217060526429 64) )) (= (_ bv0 64) (ref (_ bv13395322353855848678 64) )) (= (_ bv0 64) (ref (_ bv10893481731251300669 64) )) (= (_ bv0 64) (ref (_ bv8839253909313249595 64) )) (= (_ bv0 64) (ref (_ bv16144924893011299957 64) )) (= (_ bv0 64) (ref (_ bv161828597377053829 64) )) (= (_ bv0 64) (ref (_ bv811662424529134976 64) )))))

Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
; SMT 2
; Generated for CVC 4
(set-info :source "generated by fastsynth")
(set-option :produce-models true)
(set-logic ALL)

; find_symbols
(declare-fun |ref| ((_ BitVec 64) )(_ BitVec 64))
; set_to true (equal)
(define-fun |H0| () (_ BitVec 64) (ref (_ bv811662424529134976 64) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 64) (ref (_ bv161828597377053829 64) ))

; set_to true (equal)
(define-fun |H2| () (_ BitVec 64) (ref (_ bv16144924893011299957 64) ))

; set_to true (equal)
(define-fun |H3| () (_ BitVec 64) (ref (_ bv8839253909313249595 64) ))

; set_to true (equal)
(define-fun |H4| () (_ BitVec 64) (ref (_ bv10893481731251300669 64) ))

; set_to true (equal)
(define-fun |H5| () (_ BitVec 64) (ref (_ bv13395322353855848678 64) ))

; set_to true (equal)
(define-fun |H6| () (_ BitVec 64) (ref (_ bv792637217060526429 64) ))

; set_to true (equal)
(define-fun |H7| () (_ BitVec 64) (ref (_ bv8397949731460236686 64) ))

; set_to true (equal)
(define-fun |H8| () (_ BitVec 64) (ref (_ bv16222105318718573220 64) ))

; set_to true (equal)
(define-fun |H9| () (_ BitVec 64) (ref (_ bv9638033490447332030 64) ))

; set_to false
(assert (not (and (= (_ bv0 64) (ref (_ bv9638033490447332030 64) )) (= (_ bv0 64) (ref (_ bv16222105318718573220 64) )) (= (_ bv0 64) (ref (_ bv8397949731460236686 64) )) (= (_ bv0 64) (ref (_ bv792637217060526429 64) )) (= (_ bv0 64) (ref (_ bv13395322353855848678 64) )) (= (_ bv0 64) (ref (_ bv10893481731251300669 64) )) (= (_ bv0 64) (ref (_ bv8839253909313249595 64) )) (= (_ bv0 64) (ref (_ bv16144924893011299957 64) )) (= (_ bv0 64) (ref (_ bv161828597377053829 64) )) (= (_ bv0 64) (ref (_ bv811662424529134976 64) )))))

; set_to true
(assert (=> (= (_ bv9638033490447332030 64) (_ bv9638033490447332030 64)) (= |H9| (_ bv2147483647 64))))

; set_to true
(assert (=> (= (_ bv16222105318718573220 64) (_ bv16222105318718573220 64)) (= |H8| (_ bv2147483647 64))))

; set_to true
(assert (=> (= (_ bv8397949731460236686 64) (_ bv8397949731460236686 64)) (= |H7| (_ bv2147483647 64))))

; set_to true
(assert (=> (= (_ bv792637217060526429 64) (_ bv792637217060526429 64)) (= |H6| (_ bv2147483647 64))))

; set_to true
(assert (=> (= (_ bv13395322353855848678 64) (_ bv13395322353855848678 64)) (= |H5| (_ bv2147483647 64))))

; set_to true
(assert (=> (= (_ bv10893481731251300669 64) (_ bv10893481731251300669 64)) (= |H4| (_ bv2147483647 64))))

; set_to true
(assert (=> (= (_ bv16144924893011299957 64) (_ bv16144924893011299957 64)) (= |H2| (_ bv2147483647 64))))

; set_to true
(assert (=> (= (_ bv161828597377053829 64) (_ bv161828597377053829 64)) (= |H1| (_ bv2147483647 64))))

; set_to true
(assert (=> (= (_ bv8839253909313249595 64) (_ bv8839253909313249595 64)) (= |H3| (_ bv2147483647 64))))

; set_to true
(assert (=> (= (_ bv811662424529134976 64) (_ bv811662424529134976 64)) (= |H0| (_ bv2147483647 64))))

Fail: got 10 new constraints
SYNTH iteration 2
outputting synth fun with grammar 
rules for nt 13
RUle constant(_ bv0 64)
RUle constant(_ bv1 64)
RUle symbolx
RUle bitnot(bvnot Start)
RUle shl(bvshl Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv4 64))
RUle lshr(bvlshr Start (_ bv16 64))
RUle bitand(bvand Start Start)
RUle bitor(bvor Start Start)
RUle bitxor(bvxor Start Start)
RUle +(bvadd Start Start)
RUle if(ite (= Start (_ bv1 64)) Start Start)
Got solution f -> (bvlshr (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv1 64)) (_ bv16 64)) (_ bv16 64))
VERIFY iteration 2
; SMT 2
; Generated for CVC 4
(set-info :source "generated by fastsynth")
(set-option :produce-models true)
(set-logic ALL)

; find_symbols
(declare-fun |ref| ((_ BitVec 64) )(_ BitVec 64))
; set_to true (equal)
(define-fun |H0| () (_ BitVec 64) (ref (_ bv811662424529134976 64) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 64) (ref (_ bv161828597377053829 64) ))

; set_to true (equal)
(define-fun |H2| () (_ BitVec 64) (ref (_ bv16144924893011299957 64) ))

; set_to true (equal)
(define-fun |H3| () (_ BitVec 64) (ref (_ bv8839253909313249595 64) ))

; set_to true (equal)
(define-fun |H4| () (_ BitVec 64) (ref (_ bv10893481731251300669 64) ))

; set_to true (equal)
(define-fun |H5| () (_ BitVec 64) (ref (_ bv13395322353855848678 64) ))

; set_to true (equal)
(define-fun |H6| () (_ BitVec 64) (ref (_ bv792637217060526429 64) ))

; set_to true (equal)
(define-fun |H7| () (_ BitVec 64) (ref (_ bv8397949731460236686 64) ))

; set_to true (equal)
(define-fun |H8| () (_ BitVec 64) (ref (_ bv16222105318718573220 64) ))

; set_to true (equal)
(define-fun |H9| () (_ BitVec 64) (ref (_ bv9638033490447332030 64) ))

; set_to false
(assert (not (=> (and (= (ref (_ bv161828597377053829 64) ) (_ bv2147483647 64)) (= (ref (_ bv8397949731460236686 64) ) (_ bv2147483647 64)) (= (ref (_ bv8839253909313249595 64) ) (_ bv2147483647 64)) (= (ref (_ bv9638033490447332030 64) ) (_ bv2147483647 64)) (= (ref (_ bv10893481731251300669 64) ) (_ bv2147483647 64)) (= (ref (_ bv792637217060526429 64) ) (_ bv2147483647 64)) (= (ref (_ bv811662424529134976 64) ) (_ bv2147483647 64)) (= (ref (_ bv13395322353855848678 64) ) (_ bv2147483647 64)) (= (ref (_ bv16144924893011299957 64) ) (_ bv2147483647 64)) (= (ref (_ bv16222105318718573220 64) ) (_ bv2147483647 64))) (and (= (bvlshr (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv1 64)) (_ bv16 64)) (_ bv16 64)) (ref (_ bv9638033490447332030 64) )) (= (bvlshr (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv1 64)) (_ bv16 64)) (_ bv16 64)) (ref (_ bv16222105318718573220 64) )) (= (bvlshr (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv1 64)) (_ bv16 64)) (_ bv16 64)) (ref (_ bv8397949731460236686 64) )) (= (bvlshr (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv1 64)) (_ bv16 64)) (_ bv16 64)) (ref (_ bv792637217060526429 64) )) (= (bvlshr (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv1 64)) (_ bv16 64)) (_ bv16 64)) (ref (_ bv13395322353855848678 64) )) (= (bvlshr (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv1 64)) (_ bv16 64)) (_ bv16 64)) (ref (_ bv10893481731251300669 64) )) (= (bvlshr (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv1 64)) (_ bv16 64)) (_ bv16 64)) (ref (_ bv8839253909313249595 64) )) (= (bvlshr (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv1 64)) (_ bv16 64)) (_ bv16 64)) (ref (_ bv16144924893011299957 64) )) (= (bvlshr (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv1 64)) (_ bv16 64)) (_ bv16 64)) (ref (_ bv161828597377053829 64) )) (= (bvlshr (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv1 64)) (_ bv16 64)) (_ bv16 64)) (ref (_ bv811662424529134976 64) ))))))

Verification passed
SOLUTION:
f  =  (bvlshr (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv1 64)) (_ bv16 64)) (_ bv16 64))
        0.53 real         0.41 user         0.06 sys

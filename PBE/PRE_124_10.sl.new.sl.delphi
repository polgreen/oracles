Fri 21 May 2021 15:47:22 BST
non terminal has 13rules
Start OGIS
SYNTH iteration 1
outputting synth fun with grammar 
rules for nt 13
RUle constant(_ bv0 64)
RUle constant(_ bv1 64)
RUle symbolx
RUle bitnot(bvnot Start)
RUle shl(bvshl Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv4 64))
RUle lshr(bvlshr Start (_ bv16 64))
RUle bitand(bvand Start Start)
RUle bitor(bvor Start Start)
RUle bitxor(bvxor Start Start)
RUle +(bvadd Start Start)
RUle if(ite (= Start (_ bv1 64)) Start Start)
Got solution f -> (_ bv0 64)
VERIFY iteration 1
; SMT 2
; Generated for CVC 4
(set-info :source "generated by fastsynth")
(set-option :produce-models true)
(set-logic ALL)

; find_symbols
(declare-fun |ref| ((_ BitVec 64) )(_ BitVec 64))
; set_to true (equal)
(define-fun |H0| () (_ BitVec 64) (ref (_ bv13450452757236822200 64) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 64) (ref (_ bv12362832878115897510 64) ))

; set_to true (equal)
(define-fun |H2| () (_ BitVec 64) (ref (_ bv3363245653432893765 64) ))

; set_to true (equal)
(define-fun |H3| () (_ BitVec 64) (ref (_ bv17142735148715389130 64) ))

; set_to true (equal)
(define-fun |H4| () (_ BitVec 64) (ref (_ bv479238275695918061 64) ))

; set_to true (equal)
(define-fun |H5| () (_ BitVec 64) (ref (_ bv17042373898121649489 64) ))

; set_to true (equal)
(define-fun |H6| () (_ BitVec 64) (ref (_ bv3858478552540593896 64) ))

; set_to true (equal)
(define-fun |H7| () (_ BitVec 64) (ref (_ bv4229058395188266686 64) ))

; set_to true (equal)
(define-fun |H8| () (_ BitVec 64) (ref (_ bv7430546762750935869 64) ))

; set_to true (equal)
(define-fun |H9| () (_ BitVec 64) (ref (_ bv3611436619253627373 64) ))

; set_to false
(assert (not (and (= (_ bv0 64) (ref (_ bv3611436619253627373 64) )) (= (_ bv0 64) (ref (_ bv7430546762750935869 64) )) (= (_ bv0 64) (ref (_ bv4229058395188266686 64) )) (= (_ bv0 64) (ref (_ bv3858478552540593896 64) )) (= (_ bv0 64) (ref (_ bv17042373898121649489 64) )) (= (_ bv0 64) (ref (_ bv479238275695918061 64) )) (= (_ bv0 64) (ref (_ bv17142735148715389130 64) )) (= (_ bv0 64) (ref (_ bv3363245653432893765 64) )) (= (_ bv0 64) (ref (_ bv12362832878115897510 64) )) (= (_ bv0 64) (ref (_ bv13450452757236822200 64) )))))

Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
; SMT 2
; Generated for CVC 4
(set-info :source "generated by fastsynth")
(set-option :produce-models true)
(set-logic ALL)

; find_symbols
(declare-fun |ref| ((_ BitVec 64) )(_ BitVec 64))
; set_to true (equal)
(define-fun |H0| () (_ BitVec 64) (ref (_ bv13450452757236822200 64) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 64) (ref (_ bv12362832878115897510 64) ))

; set_to true (equal)
(define-fun |H2| () (_ BitVec 64) (ref (_ bv3363245653432893765 64) ))

; set_to true (equal)
(define-fun |H3| () (_ BitVec 64) (ref (_ bv17142735148715389130 64) ))

; set_to true (equal)
(define-fun |H4| () (_ BitVec 64) (ref (_ bv479238275695918061 64) ))

; set_to true (equal)
(define-fun |H5| () (_ BitVec 64) (ref (_ bv17042373898121649489 64) ))

; set_to true (equal)
(define-fun |H6| () (_ BitVec 64) (ref (_ bv3858478552540593896 64) ))

; set_to true (equal)
(define-fun |H7| () (_ BitVec 64) (ref (_ bv4229058395188266686 64) ))

; set_to true (equal)
(define-fun |H8| () (_ BitVec 64) (ref (_ bv7430546762750935869 64) ))

; set_to true (equal)
(define-fun |H9| () (_ BitVec 64) (ref (_ bv3611436619253627373 64) ))

; set_to false
(assert (not (and (= (_ bv0 64) (ref (_ bv3611436619253627373 64) )) (= (_ bv0 64) (ref (_ bv7430546762750935869 64) )) (= (_ bv0 64) (ref (_ bv4229058395188266686 64) )) (= (_ bv0 64) (ref (_ bv3858478552540593896 64) )) (= (_ bv0 64) (ref (_ bv17042373898121649489 64) )) (= (_ bv0 64) (ref (_ bv479238275695918061 64) )) (= (_ bv0 64) (ref (_ bv17142735148715389130 64) )) (= (_ bv0 64) (ref (_ bv3363245653432893765 64) )) (= (_ bv0 64) (ref (_ bv12362832878115897510 64) )) (= (_ bv0 64) (ref (_ bv13450452757236822200 64) )))))

; set_to true
(assert (=> (= (_ bv3611436619253627373 64) (_ bv3611436619253627373 64)) (= |H9| (_ bv4294967294 64))))

; set_to true
(assert (=> (= (_ bv7430546762750935869 64) (_ bv7430546762750935869 64)) (= |H8| (_ bv4294967294 64))))

; set_to true
(assert (=> (= (_ bv4229058395188266686 64) (_ bv4229058395188266686 64)) (= |H7| (_ bv4294967294 64))))

; set_to true
(assert (=> (= (_ bv3858478552540593896 64) (_ bv3858478552540593896 64)) (= |H6| (_ bv4294967294 64))))

; set_to true
(assert (=> (= (_ bv17042373898121649489 64) (_ bv17042373898121649489 64)) (= |H5| (_ bv4294967294 64))))

; set_to true
(assert (=> (= (_ bv479238275695918061 64) (_ bv479238275695918061 64)) (= |H4| (_ bv4294967294 64))))

; set_to true
(assert (=> (= (_ bv3363245653432893765 64) (_ bv3363245653432893765 64)) (= |H2| (_ bv4294967294 64))))

; set_to true
(assert (=> (= (_ bv12362832878115897510 64) (_ bv12362832878115897510 64)) (= |H1| (_ bv4294967294 64))))

; set_to true
(assert (=> (= (_ bv17142735148715389130 64) (_ bv17142735148715389130 64)) (= |H3| (_ bv4294967294 64))))

; set_to true
(assert (=> (= (_ bv13450452757236822200 64) (_ bv13450452757236822200 64)) (= |H0| (_ bv4294967294 64))))

Fail: got 10 new constraints
SYNTH iteration 2
outputting synth fun with grammar 
rules for nt 13
RUle constant(_ bv0 64)
RUle constant(_ bv1 64)
RUle symbolx
RUle bitnot(bvnot Start)
RUle shl(bvshl Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv4 64))
RUle lshr(bvlshr Start (_ bv16 64))
RUle bitand(bvand Start Start)
RUle bitor(bvor Start Start)
RUle bitxor(bvxor Start Start)
RUle +(bvadd Start Start)
RUle if(ite (= Start (_ bv1 64)) Start Start)
Got solution f -> (bvxor (_ bv1 64) (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)))
VERIFY iteration 2
; SMT 2
; Generated for CVC 4
(set-info :source "generated by fastsynth")
(set-option :produce-models true)
(set-logic ALL)

; find_symbols
(declare-fun |ref| ((_ BitVec 64) )(_ BitVec 64))
; set_to true (equal)
(define-fun |H0| () (_ BitVec 64) (ref (_ bv13450452757236822200 64) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 64) (ref (_ bv12362832878115897510 64) ))

; set_to true (equal)
(define-fun |H2| () (_ BitVec 64) (ref (_ bv3363245653432893765 64) ))

; set_to true (equal)
(define-fun |H3| () (_ BitVec 64) (ref (_ bv17142735148715389130 64) ))

; set_to true (equal)
(define-fun |H4| () (_ BitVec 64) (ref (_ bv479238275695918061 64) ))

; set_to true (equal)
(define-fun |H5| () (_ BitVec 64) (ref (_ bv17042373898121649489 64) ))

; set_to true (equal)
(define-fun |H6| () (_ BitVec 64) (ref (_ bv3858478552540593896 64) ))

; set_to true (equal)
(define-fun |H7| () (_ BitVec 64) (ref (_ bv4229058395188266686 64) ))

; set_to true (equal)
(define-fun |H8| () (_ BitVec 64) (ref (_ bv7430546762750935869 64) ))

; set_to true (equal)
(define-fun |H9| () (_ BitVec 64) (ref (_ bv3611436619253627373 64) ))

; set_to false
(assert (not (=> (and (= (ref (_ bv3363245653432893765 64) ) (_ bv4294967294 64)) (= (ref (_ bv3611436619253627373 64) ) (_ bv4294967294 64)) (= (ref (_ bv3858478552540593896 64) ) (_ bv4294967294 64)) (= (ref (_ bv4229058395188266686 64) ) (_ bv4294967294 64)) (= (ref (_ bv7430546762750935869 64) ) (_ bv4294967294 64)) (= (ref (_ bv479238275695918061 64) ) (_ bv4294967294 64)) (= (ref (_ bv12362832878115897510 64) ) (_ bv4294967294 64)) (= (ref (_ bv13450452757236822200 64) ) (_ bv4294967294 64)) (= (ref (_ bv17042373898121649489 64) ) (_ bv4294967294 64)) (= (ref (_ bv17142735148715389130 64) ) (_ bv4294967294 64))) (and (= (bvxor (_ bv1 64) (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64))) (ref (_ bv3611436619253627373 64) )) (= (bvxor (_ bv1 64) (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64))) (ref (_ bv7430546762750935869 64) )) (= (bvxor (_ bv1 64) (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64))) (ref (_ bv4229058395188266686 64) )) (= (bvxor (_ bv1 64) (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64))) (ref (_ bv3858478552540593896 64) )) (= (bvxor (_ bv1 64) (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64))) (ref (_ bv17042373898121649489 64) )) (= (bvxor (_ bv1 64) (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64))) (ref (_ bv479238275695918061 64) )) (= (bvxor (_ bv1 64) (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64))) (ref (_ bv17142735148715389130 64) )) (= (bvxor (_ bv1 64) (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64))) (ref (_ bv3363245653432893765 64) )) (= (bvxor (_ bv1 64) (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64))) (ref (_ bv12362832878115897510 64) )) (= (bvxor (_ bv1 64) (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64))) (ref (_ bv13450452757236822200 64) ))))))

Verification passed
SOLUTION:
f  =  (bvxor (_ bv1 64) (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)))
        1.39 real         0.94 user         0.05 sys

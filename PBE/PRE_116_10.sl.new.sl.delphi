Fri 21 May 2021 15:45:11 BST
non terminal has 13rules
Start OGIS
SYNTH iteration 1
outputting synth fun with grammar 
rules for nt 13
RUle constant(_ bv0 64)
RUle constant(_ bv1 64)
RUle symbolx
RUle bitnot(bvnot Start)
RUle shl(bvshl Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv4 64))
RUle lshr(bvlshr Start (_ bv16 64))
RUle bitand(bvand Start Start)
RUle bitor(bvor Start Start)
RUle bitxor(bvxor Start Start)
RUle +(bvadd Start Start)
RUle if(ite (= Start (_ bv1 64)) Start Start)
Got solution f -> (_ bv0 64)
VERIFY iteration 1
; SMT 2
; Generated for CVC 4
(set-info :source "generated by fastsynth")
(set-option :produce-models true)
(set-logic ALL)

; find_symbols
(declare-fun |ref| ((_ BitVec 64) )(_ BitVec 64))
; set_to true (equal)
(define-fun |H0| () (_ BitVec 64) (ref (_ bv7628339336075282697 64) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 64) (ref (_ bv4860637062747931374 64) ))

; set_to true (equal)
(define-fun |H2| () (_ BitVec 64) (ref (_ bv17116808031097297117 64) ))

; set_to true (equal)
(define-fun |H3| () (_ BitVec 64) (ref (_ bv4531967346984157848 64) ))

; set_to true (equal)
(define-fun |H4| () (_ BitVec 64) (ref (_ bv6960388099786311521 64) ))

; set_to true (equal)
(define-fun |H5| () (_ BitVec 64) (ref (_ bv9558293571426987168 64) ))

; set_to true (equal)
(define-fun |H6| () (_ BitVec 64) (ref (_ bv1235962304686228798 64) ))

; set_to true (equal)
(define-fun |H7| () (_ BitVec 64) (ref (_ bv12024743302579994750 64) ))

; set_to true (equal)
(define-fun |H8| () (_ BitVec 64) (ref (_ bv12111704494112738146 64) ))

; set_to true (equal)
(define-fun |H9| () (_ BitVec 64) (ref (_ bv4957564215680179018 64) ))

; set_to false
(assert (not (and (= (_ bv0 64) (ref (_ bv4957564215680179018 64) )) (= (_ bv0 64) (ref (_ bv12111704494112738146 64) )) (= (_ bv0 64) (ref (_ bv12024743302579994750 64) )) (= (_ bv0 64) (ref (_ bv1235962304686228798 64) )) (= (_ bv0 64) (ref (_ bv9558293571426987168 64) )) (= (_ bv0 64) (ref (_ bv6960388099786311521 64) )) (= (_ bv0 64) (ref (_ bv4531967346984157848 64) )) (= (_ bv0 64) (ref (_ bv17116808031097297117 64) )) (= (_ bv0 64) (ref (_ bv4860637062747931374 64) )) (= (_ bv0 64) (ref (_ bv7628339336075282697 64) )))))

Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
; SMT 2
; Generated for CVC 4
(set-info :source "generated by fastsynth")
(set-option :produce-models true)
(set-logic ALL)

; find_symbols
(declare-fun |ref| ((_ BitVec 64) )(_ BitVec 64))
; set_to true (equal)
(define-fun |H0| () (_ BitVec 64) (ref (_ bv7628339336075282697 64) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 64) (ref (_ bv4860637062747931374 64) ))

; set_to true (equal)
(define-fun |H2| () (_ BitVec 64) (ref (_ bv17116808031097297117 64) ))

; set_to true (equal)
(define-fun |H3| () (_ BitVec 64) (ref (_ bv4531967346984157848 64) ))

; set_to true (equal)
(define-fun |H4| () (_ BitVec 64) (ref (_ bv6960388099786311521 64) ))

; set_to true (equal)
(define-fun |H5| () (_ BitVec 64) (ref (_ bv9558293571426987168 64) ))

; set_to true (equal)
(define-fun |H6| () (_ BitVec 64) (ref (_ bv1235962304686228798 64) ))

; set_to true (equal)
(define-fun |H7| () (_ BitVec 64) (ref (_ bv12024743302579994750 64) ))

; set_to true (equal)
(define-fun |H8| () (_ BitVec 64) (ref (_ bv12111704494112738146 64) ))

; set_to true (equal)
(define-fun |H9| () (_ BitVec 64) (ref (_ bv4957564215680179018 64) ))

; set_to false
(assert (not (and (= (_ bv0 64) (ref (_ bv4957564215680179018 64) )) (= (_ bv0 64) (ref (_ bv12111704494112738146 64) )) (= (_ bv0 64) (ref (_ bv12024743302579994750 64) )) (= (_ bv0 64) (ref (_ bv1235962304686228798 64) )) (= (_ bv0 64) (ref (_ bv9558293571426987168 64) )) (= (_ bv0 64) (ref (_ bv6960388099786311521 64) )) (= (_ bv0 64) (ref (_ bv4531967346984157848 64) )) (= (_ bv0 64) (ref (_ bv17116808031097297117 64) )) (= (_ bv0 64) (ref (_ bv4860637062747931374 64) )) (= (_ bv0 64) (ref (_ bv7628339336075282697 64) )))))

; set_to true
(assert (=> (= (_ bv4957564215680179018 64) (_ bv4957564215680179018 64)) (= |H9| (_ bv131070 64))))

; set_to true
(assert (=> (= (_ bv12111704494112738146 64) (_ bv12111704494112738146 64)) (= |H8| (_ bv131070 64))))

; set_to true
(assert (=> (= (_ bv12024743302579994750 64) (_ bv12024743302579994750 64)) (= |H7| (_ bv131070 64))))

; set_to true
(assert (=> (= (_ bv1235962304686228798 64) (_ bv1235962304686228798 64)) (= |H6| (_ bv131070 64))))

; set_to true
(assert (=> (= (_ bv9558293571426987168 64) (_ bv9558293571426987168 64)) (= |H5| (_ bv131070 64))))

; set_to true
(assert (=> (= (_ bv6960388099786311521 64) (_ bv6960388099786311521 64)) (= |H4| (_ bv131070 64))))

; set_to true
(assert (=> (= (_ bv17116808031097297117 64) (_ bv17116808031097297117 64)) (= |H2| (_ bv131070 64))))

; set_to true
(assert (=> (= (_ bv4860637062747931374 64) (_ bv4860637062747931374 64)) (= |H1| (_ bv131070 64))))

; set_to true
(assert (=> (= (_ bv4531967346984157848 64) (_ bv4531967346984157848 64)) (= |H3| (_ bv131070 64))))

; set_to true
(assert (=> (= (_ bv7628339336075282697 64) (_ bv7628339336075282697 64)) (= |H0| (_ bv131070 64))))

Fail: got 10 new constraints
SYNTH iteration 2
outputting synth fun with grammar 
rules for nt 13
RUle constant(_ bv0 64)
RUle constant(_ bv1 64)
RUle symbolx
RUle bitnot(bvnot Start)
RUle shl(bvshl Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv4 64))
RUle lshr(bvlshr Start (_ bv16 64))
RUle bitand(bvand Start Start)
RUle bitor(bvor Start Start)
RUle bitxor(bvxor Start Start)
RUle +(bvadd Start Start)
RUle if(ite (= Start (_ bv1 64)) Start Start)
Got solution f -> (bvshl (bvlshr (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (_ bv16 64)) (_ bv1 64))
VERIFY iteration 2
; SMT 2
; Generated for CVC 4
(set-info :source "generated by fastsynth")
(set-option :produce-models true)
(set-logic ALL)

; find_symbols
(declare-fun |ref| ((_ BitVec 64) )(_ BitVec 64))
; set_to true (equal)
(define-fun |H0| () (_ BitVec 64) (ref (_ bv7628339336075282697 64) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 64) (ref (_ bv4860637062747931374 64) ))

; set_to true (equal)
(define-fun |H2| () (_ BitVec 64) (ref (_ bv17116808031097297117 64) ))

; set_to true (equal)
(define-fun |H3| () (_ BitVec 64) (ref (_ bv4531967346984157848 64) ))

; set_to true (equal)
(define-fun |H4| () (_ BitVec 64) (ref (_ bv6960388099786311521 64) ))

; set_to true (equal)
(define-fun |H5| () (_ BitVec 64) (ref (_ bv9558293571426987168 64) ))

; set_to true (equal)
(define-fun |H6| () (_ BitVec 64) (ref (_ bv1235962304686228798 64) ))

; set_to true (equal)
(define-fun |H7| () (_ BitVec 64) (ref (_ bv12024743302579994750 64) ))

; set_to true (equal)
(define-fun |H8| () (_ BitVec 64) (ref (_ bv12111704494112738146 64) ))

; set_to true (equal)
(define-fun |H9| () (_ BitVec 64) (ref (_ bv4957564215680179018 64) ))

; set_to false
(assert (not (=> (and (= (ref (_ bv1235962304686228798 64) ) (_ bv131070 64)) (= (ref (_ bv4531967346984157848 64) ) (_ bv131070 64)) (= (ref (_ bv4860637062747931374 64) ) (_ bv131070 64)) (= (ref (_ bv4957564215680179018 64) ) (_ bv131070 64)) (= (ref (_ bv6960388099786311521 64) ) (_ bv131070 64)) (= (ref (_ bv7628339336075282697 64) ) (_ bv131070 64)) (= (ref (_ bv9558293571426987168 64) ) (_ bv131070 64)) (= (ref (_ bv12024743302579994750 64) ) (_ bv131070 64)) (= (ref (_ bv12111704494112738146 64) ) (_ bv131070 64)) (= (ref (_ bv17116808031097297117 64) ) (_ bv131070 64))) (and (= (bvshl (bvlshr (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (_ bv16 64)) (_ bv1 64)) (ref (_ bv4957564215680179018 64) )) (= (bvshl (bvlshr (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (_ bv16 64)) (_ bv1 64)) (ref (_ bv12111704494112738146 64) )) (= (bvshl (bvlshr (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (_ bv16 64)) (_ bv1 64)) (ref (_ bv12024743302579994750 64) )) (= (bvshl (bvlshr (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (_ bv16 64)) (_ bv1 64)) (ref (_ bv1235962304686228798 64) )) (= (bvshl (bvlshr (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (_ bv16 64)) (_ bv1 64)) (ref (_ bv9558293571426987168 64) )) (= (bvshl (bvlshr (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (_ bv16 64)) (_ bv1 64)) (ref (_ bv6960388099786311521 64) )) (= (bvshl (bvlshr (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (_ bv16 64)) (_ bv1 64)) (ref (_ bv4531967346984157848 64) )) (= (bvshl (bvlshr (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (_ bv16 64)) (_ bv1 64)) (ref (_ bv17116808031097297117 64) )) (= (bvshl (bvlshr (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (_ bv16 64)) (_ bv1 64)) (ref (_ bv4860637062747931374 64) )) (= (bvshl (bvlshr (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (_ bv16 64)) (_ bv1 64)) (ref (_ bv7628339336075282697 64) ))))))

Verification passed
SOLUTION:
f  =  (bvshl (bvlshr (bvlshr (bvlshr (bvnot (_ bv0 64)) (_ bv16 64)) (_ bv16 64)) (_ bv16 64)) (_ bv1 64))
        5.49 real         5.14 user         0.09 sys

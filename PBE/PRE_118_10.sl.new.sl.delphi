Fri 21 May 2021 15:45:18 BST
non terminal has 13rules
Start OGIS
SYNTH iteration 1
outputting synth fun with grammar 
rules for nt 13
RUle constant(_ bv0 64)
RUle constant(_ bv1 64)
RUle symbolx
RUle bitnot(bvnot Start)
RUle shl(bvshl Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv4 64))
RUle lshr(bvlshr Start (_ bv16 64))
RUle bitand(bvand Start Start)
RUle bitor(bvor Start Start)
RUle bitxor(bvxor Start Start)
RUle +(bvadd Start Start)
RUle if(ite (= Start (_ bv1 64)) Start Start)
Got solution f -> (_ bv0 64)
VERIFY iteration 1
; SMT 2
; Generated for CVC 4
(set-info :source "generated by fastsynth")
(set-option :produce-models true)
(set-logic ALL)

; find_symbols
(declare-fun |ref| ((_ BitVec 64) )(_ BitVec 64))
; set_to true (equal)
(define-fun |H0| () (_ BitVec 64) (ref (_ bv12436341006048078318 64) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 64) (ref (_ bv11809872998111063524 64) ))

; set_to true (equal)
(define-fun |H2| () (_ BitVec 64) (ref (_ bv3374812572751094509 64) ))

; set_to true (equal)
(define-fun |H3| () (_ BitVec 64) (ref (_ bv15774812351613056787 64) ))

; set_to true (equal)
(define-fun |H4| () (_ BitVec 64) (ref (_ bv175655911126913821 64) ))

; set_to true (equal)
(define-fun |H5| () (_ BitVec 64) (ref (_ bv7931727063699165315 64) ))

; set_to true (equal)
(define-fun |H6| () (_ BitVec 64) (ref (_ bv9027670485628508045 64) ))

; set_to true (equal)
(define-fun |H7| () (_ BitVec 64) (ref (_ bv498236479787867757 64) ))

; set_to true (equal)
(define-fun |H8| () (_ BitVec 64) (ref (_ bv5484558489762888537 64) ))

; set_to true (equal)
(define-fun |H9| () (_ BitVec 64) (ref (_ bv8856021473155607088 64) ))

; set_to false
(assert (not (and (= (_ bv0 64) (ref (_ bv8856021473155607088 64) )) (= (_ bv0 64) (ref (_ bv5484558489762888537 64) )) (= (_ bv0 64) (ref (_ bv498236479787867757 64) )) (= (_ bv0 64) (ref (_ bv9027670485628508045 64) )) (= (_ bv0 64) (ref (_ bv7931727063699165315 64) )) (= (_ bv0 64) (ref (_ bv175655911126913821 64) )) (= (_ bv0 64) (ref (_ bv15774812351613056787 64) )) (= (_ bv0 64) (ref (_ bv3374812572751094509 64) )) (= (_ bv0 64) (ref (_ bv11809872998111063524 64) )) (= (_ bv0 64) (ref (_ bv12436341006048078318 64) )))))

Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
; SMT 2
; Generated for CVC 4
(set-info :source "generated by fastsynth")
(set-option :produce-models true)
(set-logic ALL)

; find_symbols
(declare-fun |ref| ((_ BitVec 64) )(_ BitVec 64))
; set_to true (equal)
(define-fun |H0| () (_ BitVec 64) (ref (_ bv12436341006048078318 64) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 64) (ref (_ bv11809872998111063524 64) ))

; set_to true (equal)
(define-fun |H2| () (_ BitVec 64) (ref (_ bv3374812572751094509 64) ))

; set_to true (equal)
(define-fun |H3| () (_ BitVec 64) (ref (_ bv15774812351613056787 64) ))

; set_to true (equal)
(define-fun |H4| () (_ BitVec 64) (ref (_ bv175655911126913821 64) ))

; set_to true (equal)
(define-fun |H5| () (_ BitVec 64) (ref (_ bv7931727063699165315 64) ))

; set_to true (equal)
(define-fun |H6| () (_ BitVec 64) (ref (_ bv9027670485628508045 64) ))

; set_to true (equal)
(define-fun |H7| () (_ BitVec 64) (ref (_ bv498236479787867757 64) ))

; set_to true (equal)
(define-fun |H8| () (_ BitVec 64) (ref (_ bv5484558489762888537 64) ))

; set_to true (equal)
(define-fun |H9| () (_ BitVec 64) (ref (_ bv8856021473155607088 64) ))

; set_to false
(assert (not (and (= (_ bv0 64) (ref (_ bv8856021473155607088 64) )) (= (_ bv0 64) (ref (_ bv5484558489762888537 64) )) (= (_ bv0 64) (ref (_ bv498236479787867757 64) )) (= (_ bv0 64) (ref (_ bv9027670485628508045 64) )) (= (_ bv0 64) (ref (_ bv7931727063699165315 64) )) (= (_ bv0 64) (ref (_ bv175655911126913821 64) )) (= (_ bv0 64) (ref (_ bv15774812351613056787 64) )) (= (_ bv0 64) (ref (_ bv3374812572751094509 64) )) (= (_ bv0 64) (ref (_ bv11809872998111063524 64) )) (= (_ bv0 64) (ref (_ bv12436341006048078318 64) )))))

; set_to true
(assert (=> (= (_ bv8856021473155607088 64) (_ bv8856021473155607088 64)) (= |H9| (_ bv255 64))))

; set_to true
(assert (=> (= (_ bv5484558489762888537 64) (_ bv5484558489762888537 64)) (= |H8| (_ bv255 64))))

; set_to true
(assert (=> (= (_ bv498236479787867757 64) (_ bv498236479787867757 64)) (= |H7| (_ bv255 64))))

; set_to true
(assert (=> (= (_ bv9027670485628508045 64) (_ bv9027670485628508045 64)) (= |H6| (_ bv255 64))))

; set_to true
(assert (=> (= (_ bv7931727063699165315 64) (_ bv7931727063699165315 64)) (= |H5| (_ bv255 64))))

; set_to true
(assert (=> (= (_ bv175655911126913821 64) (_ bv175655911126913821 64)) (= |H4| (_ bv255 64))))

; set_to true
(assert (=> (= (_ bv3374812572751094509 64) (_ bv3374812572751094509 64)) (= |H2| (_ bv255 64))))

; set_to true
(assert (=> (= (_ bv11809872998111063524 64) (_ bv11809872998111063524 64)) (= |H1| (_ bv255 64))))

; set_to true
(assert (=> (= (_ bv15774812351613056787 64) (_ bv15774812351613056787 64)) (= |H3| (_ bv255 64))))

; set_to true
(assert (=> (= (_ bv12436341006048078318 64) (_ bv12436341006048078318 64)) (= |H0| (_ bv255 64))))

Fail: got 10 new constraints
SYNTH iteration 2
outputting synth fun with grammar 
rules for nt 13
RUle constant(_ bv0 64)
RUle constant(_ bv1 64)
RUle symbolx
RUle bitnot(bvnot Start)
RUle shl(bvshl Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv4 64))
RUle lshr(bvlshr Start (_ bv16 64))
RUle bitand(bvand Start Start)
RUle bitor(bvor Start Start)
RUle bitxor(bvxor Start Start)
RUle +(bvadd Start Start)
RUle if(ite (= Start (_ bv1 64)) Start Start)

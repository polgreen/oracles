Fri 21 May 2021 15:42:50 BST
non terminal has 13rules
Start OGIS
SYNTH iteration 1
outputting synth fun with grammar 
rules for nt 13
RUle constant(_ bv0 64)
RUle constant(_ bv1 64)
RUle symbolx
RUle bitnot(bvnot Start)
RUle shl(bvshl Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv4 64))
RUle lshr(bvlshr Start (_ bv16 64))
RUle bitand(bvand Start Start)
RUle bitor(bvor Start Start)
RUle bitxor(bvxor Start Start)
RUle +(bvadd Start Start)
RUle if(ite (= Start (_ bv1 64)) Start Start)
Got solution f -> (_ bv0 64)
VERIFY iteration 1
; SMT 2
; Generated for CVC 4
(set-info :source "generated by fastsynth")
(set-option :produce-models true)
(set-logic ALL)

; find_symbols
(declare-fun |ref| ((_ BitVec 64) )(_ BitVec 64))
; set_to true (equal)
(define-fun |H0| () (_ BitVec 64) (ref (_ bv16810677498382102042 64) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 64) (ref (_ bv650896703859998134 64) ))

; set_to true (equal)
(define-fun |H2| () (_ BitVec 64) (ref (_ bv12524847346162920278 64) ))

; set_to true (equal)
(define-fun |H3| () (_ BitVec 64) (ref (_ bv12561212441468039187 64) ))

; set_to true (equal)
(define-fun |H4| () (_ BitVec 64) (ref (_ bv852719944736224131 64) ))

; set_to true (equal)
(define-fun |H5| () (_ BitVec 64) (ref (_ bv7211328113049731479 64) ))

; set_to true (equal)
(define-fun |H6| () (_ BitVec 64) (ref (_ bv8802082394043140584 64) ))

; set_to true (equal)
(define-fun |H7| () (_ BitVec 64) (ref (_ bv11706486576686127253 64) ))

; set_to true (equal)
(define-fun |H8| () (_ BitVec 64) (ref (_ bv10270151193005361758 64) ))

; set_to true (equal)
(define-fun |H9| () (_ BitVec 64) (ref (_ bv12026694435677020358 64) ))

; set_to false
(assert (not (and (= (_ bv0 64) (ref (_ bv12026694435677020358 64) )) (= (_ bv0 64) (ref (_ bv10270151193005361758 64) )) (= (_ bv0 64) (ref (_ bv11706486576686127253 64) )) (= (_ bv0 64) (ref (_ bv8802082394043140584 64) )) (= (_ bv0 64) (ref (_ bv7211328113049731479 64) )) (= (_ bv0 64) (ref (_ bv852719944736224131 64) )) (= (_ bv0 64) (ref (_ bv12561212441468039187 64) )) (= (_ bv0 64) (ref (_ bv12524847346162920278 64) )) (= (_ bv0 64) (ref (_ bv650896703859998134 64) )) (= (_ bv0 64) (ref (_ bv16810677498382102042 64) )))))

Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
; SMT 2
; Generated for CVC 4
(set-info :source "generated by fastsynth")
(set-option :produce-models true)
(set-logic ALL)

; find_symbols
(declare-fun |ref| ((_ BitVec 64) )(_ BitVec 64))
; set_to true (equal)
(define-fun |H0| () (_ BitVec 64) (ref (_ bv16810677498382102042 64) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 64) (ref (_ bv650896703859998134 64) ))

; set_to true (equal)
(define-fun |H2| () (_ BitVec 64) (ref (_ bv12524847346162920278 64) ))

; set_to true (equal)
(define-fun |H3| () (_ BitVec 64) (ref (_ bv12561212441468039187 64) ))

; set_to true (equal)
(define-fun |H4| () (_ BitVec 64) (ref (_ bv852719944736224131 64) ))

; set_to true (equal)
(define-fun |H5| () (_ BitVec 64) (ref (_ bv7211328113049731479 64) ))

; set_to true (equal)
(define-fun |H6| () (_ BitVec 64) (ref (_ bv8802082394043140584 64) ))

; set_to true (equal)
(define-fun |H7| () (_ BitVec 64) (ref (_ bv11706486576686127253 64) ))

; set_to true (equal)
(define-fun |H8| () (_ BitVec 64) (ref (_ bv10270151193005361758 64) ))

; set_to true (equal)
(define-fun |H9| () (_ BitVec 64) (ref (_ bv12026694435677020358 64) ))

; set_to false
(assert (not (and (= (_ bv0 64) (ref (_ bv12026694435677020358 64) )) (= (_ bv0 64) (ref (_ bv10270151193005361758 64) )) (= (_ bv0 64) (ref (_ bv11706486576686127253 64) )) (= (_ bv0 64) (ref (_ bv8802082394043140584 64) )) (= (_ bv0 64) (ref (_ bv7211328113049731479 64) )) (= (_ bv0 64) (ref (_ bv852719944736224131 64) )) (= (_ bv0 64) (ref (_ bv12561212441468039187 64) )) (= (_ bv0 64) (ref (_ bv12524847346162920278 64) )) (= (_ bv0 64) (ref (_ bv650896703859998134 64) )) (= (_ bv0 64) (ref (_ bv16810677498382102042 64) )))))

; set_to true
(assert (=> (= (_ bv12026694435677020358 64) (_ bv12026694435677020358 64)) (= |H9| (_ bv127 64))))

; set_to true
(assert (=> (= (_ bv10270151193005361758 64) (_ bv10270151193005361758 64)) (= |H8| (_ bv127 64))))

; set_to true
(assert (=> (= (_ bv11706486576686127253 64) (_ bv11706486576686127253 64)) (= |H7| (_ bv127 64))))

; set_to true
(assert (=> (= (_ bv8802082394043140584 64) (_ bv8802082394043140584 64)) (= |H6| (_ bv127 64))))

; set_to true
(assert (=> (= (_ bv7211328113049731479 64) (_ bv7211328113049731479 64)) (= |H5| (_ bv127 64))))

; set_to true
(assert (=> (= (_ bv852719944736224131 64) (_ bv852719944736224131 64)) (= |H4| (_ bv127 64))))

; set_to true
(assert (=> (= (_ bv12524847346162920278 64) (_ bv12524847346162920278 64)) (= |H2| (_ bv127 64))))

; set_to true
(assert (=> (= (_ bv650896703859998134 64) (_ bv650896703859998134 64)) (= |H1| (_ bv127 64))))

; set_to true
(assert (=> (= (_ bv12561212441468039187 64) (_ bv12561212441468039187 64)) (= |H3| (_ bv127 64))))

; set_to true
(assert (=> (= (_ bv16810677498382102042 64) (_ bv16810677498382102042 64)) (= |H0| (_ bv127 64))))

Fail: got 10 new constraints
SYNTH iteration 2
outputting synth fun with grammar 
rules for nt 13
RUle constant(_ bv0 64)
RUle constant(_ bv1 64)
RUle symbolx
RUle bitnot(bvnot Start)
RUle shl(bvshl Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv4 64))
RUle lshr(bvlshr Start (_ bv16 64))
RUle bitand(bvand Start Start)
RUle bitor(bvor Start Start)
RUle bitxor(bvxor Start Start)
RUle +(bvadd Start Start)
RUle if(ite (= Start (_ bv1 64)) Start Start)

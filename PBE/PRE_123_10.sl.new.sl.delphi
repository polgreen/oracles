Fri 21 May 2021 15:46:22 BST
non terminal has 13rules
Start OGIS
SYNTH iteration 1
outputting synth fun with grammar 
rules for nt 13
RUle constant(_ bv0 64)
RUle constant(_ bv1 64)
RUle symbolx
RUle bitnot(bvnot Start)
RUle shl(bvshl Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv4 64))
RUle lshr(bvlshr Start (_ bv16 64))
RUle bitand(bvand Start Start)
RUle bitor(bvor Start Start)
RUle bitxor(bvxor Start Start)
RUle +(bvadd Start Start)
RUle if(ite (= Start (_ bv1 64)) Start Start)
Got solution f -> (_ bv0 64)
VERIFY iteration 1
; SMT 2
; Generated for CVC 4
(set-info :source "generated by fastsynth")
(set-option :produce-models true)
(set-logic ALL)

; find_symbols
(declare-fun |ref| ((_ BitVec 64) )(_ BitVec 64))
; set_to true (equal)
(define-fun |H0| () (_ BitVec 64) (ref (_ bv5153574415132860126 64) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 64) (ref (_ bv6760117014924805489 64) ))

; set_to true (equal)
(define-fun |H2| () (_ BitVec 64) (ref (_ bv12561909795450642745 64) ))

; set_to true (equal)
(define-fun |H3| () (_ BitVec 64) (ref (_ bv13320196912619143959 64) ))

; set_to true (equal)
(define-fun |H4| () (_ BitVec 64) (ref (_ bv1648395532280550983 64) ))

; set_to true (equal)
(define-fun |H5| () (_ BitVec 64) (ref (_ bv1866914764872118418 64) ))

; set_to true (equal)
(define-fun |H6| () (_ BitVec 64) (ref (_ bv16765756094628979774 64) ))

; set_to true (equal)
(define-fun |H7| () (_ BitVec 64) (ref (_ bv17174164109890374812 64) ))

; set_to true (equal)
(define-fun |H8| () (_ BitVec 64) (ref (_ bv7062379689109152999 64) ))

; set_to true (equal)
(define-fun |H9| () (_ BitVec 64) (ref (_ bv13862394312678252620 64) ))

; set_to false
(assert (not (and (= (_ bv0 64) (ref (_ bv13862394312678252620 64) )) (= (_ bv0 64) (ref (_ bv7062379689109152999 64) )) (= (_ bv0 64) (ref (_ bv17174164109890374812 64) )) (= (_ bv0 64) (ref (_ bv16765756094628979774 64) )) (= (_ bv0 64) (ref (_ bv1866914764872118418 64) )) (= (_ bv0 64) (ref (_ bv1648395532280550983 64) )) (= (_ bv0 64) (ref (_ bv13320196912619143959 64) )) (= (_ bv0 64) (ref (_ bv12561909795450642745 64) )) (= (_ bv0 64) (ref (_ bv6760117014924805489 64) )) (= (_ bv0 64) (ref (_ bv5153574415132860126 64) )))))

Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
Unable to parse input value
; SMT 2
; Generated for CVC 4
(set-info :source "generated by fastsynth")
(set-option :produce-models true)
(set-logic ALL)

; find_symbols
(declare-fun |ref| ((_ BitVec 64) )(_ BitVec 64))
; set_to true (equal)
(define-fun |H0| () (_ BitVec 64) (ref (_ bv5153574415132860126 64) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 64) (ref (_ bv6760117014924805489 64) ))

; set_to true (equal)
(define-fun |H2| () (_ BitVec 64) (ref (_ bv12561909795450642745 64) ))

; set_to true (equal)
(define-fun |H3| () (_ BitVec 64) (ref (_ bv13320196912619143959 64) ))

; set_to true (equal)
(define-fun |H4| () (_ BitVec 64) (ref (_ bv1648395532280550983 64) ))

; set_to true (equal)
(define-fun |H5| () (_ BitVec 64) (ref (_ bv1866914764872118418 64) ))

; set_to true (equal)
(define-fun |H6| () (_ BitVec 64) (ref (_ bv16765756094628979774 64) ))

; set_to true (equal)
(define-fun |H7| () (_ BitVec 64) (ref (_ bv17174164109890374812 64) ))

; set_to true (equal)
(define-fun |H8| () (_ BitVec 64) (ref (_ bv7062379689109152999 64) ))

; set_to true (equal)
(define-fun |H9| () (_ BitVec 64) (ref (_ bv13862394312678252620 64) ))

; set_to false
(assert (not (and (= (_ bv0 64) (ref (_ bv13862394312678252620 64) )) (= (_ bv0 64) (ref (_ bv7062379689109152999 64) )) (= (_ bv0 64) (ref (_ bv17174164109890374812 64) )) (= (_ bv0 64) (ref (_ bv16765756094628979774 64) )) (= (_ bv0 64) (ref (_ bv1866914764872118418 64) )) (= (_ bv0 64) (ref (_ bv1648395532280550983 64) )) (= (_ bv0 64) (ref (_ bv13320196912619143959 64) )) (= (_ bv0 64) (ref (_ bv12561909795450642745 64) )) (= (_ bv0 64) (ref (_ bv6760117014924805489 64) )) (= (_ bv0 64) (ref (_ bv5153574415132860126 64) )))))

; set_to true
(assert (=> (= (_ bv13862394312678252620 64) (_ bv13862394312678252620 64)) (= |H9| (_ bv2047 64))))

; set_to true
(assert (=> (= (_ bv7062379689109152999 64) (_ bv7062379689109152999 64)) (= |H8| (_ bv2047 64))))

; set_to true
(assert (=> (= (_ bv17174164109890374812 64) (_ bv17174164109890374812 64)) (= |H7| (_ bv2047 64))))

; set_to true
(assert (=> (= (_ bv16765756094628979774 64) (_ bv16765756094628979774 64)) (= |H6| (_ bv2047 64))))

; set_to true
(assert (=> (= (_ bv1866914764872118418 64) (_ bv1866914764872118418 64)) (= |H5| (_ bv2047 64))))

; set_to true
(assert (=> (= (_ bv1648395532280550983 64) (_ bv1648395532280550983 64)) (= |H4| (_ bv2047 64))))

; set_to true
(assert (=> (= (_ bv12561909795450642745 64) (_ bv12561909795450642745 64)) (= |H2| (_ bv2047 64))))

; set_to true
(assert (=> (= (_ bv6760117014924805489 64) (_ bv6760117014924805489 64)) (= |H1| (_ bv2047 64))))

; set_to true
(assert (=> (= (_ bv13320196912619143959 64) (_ bv13320196912619143959 64)) (= |H3| (_ bv2047 64))))

; set_to true
(assert (=> (= (_ bv5153574415132860126 64) (_ bv5153574415132860126 64)) (= |H0| (_ bv2047 64))))

Fail: got 10 new constraints
SYNTH iteration 2
outputting synth fun with grammar 
rules for nt 13
RUle constant(_ bv0 64)
RUle constant(_ bv1 64)
RUle symbolx
RUle bitnot(bvnot Start)
RUle shl(bvshl Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv1 64))
RUle lshr(bvlshr Start (_ bv4 64))
RUle lshr(bvlshr Start (_ bv16 64))
RUle bitand(bvand Start Start)
RUle bitor(bvor Start Start)
RUle bitxor(bvxor Start Start)
RUle +(bvadd Start Start)
RUle if(ite (= Start (_ bv1 64)) Start Start)
